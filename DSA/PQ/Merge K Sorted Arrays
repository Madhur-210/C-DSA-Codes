#include<queue>
class triplet{
    public:
    int elem;
    int ai;
    int ei;
    triplet(int elem, int ai, int ei){
        this->elem = elem;
        this->ai = ai;
        this->ei = ei;
    }
};
class Comp{
    public:
    bool operator ()(triplet a,	triplet b){
        return a.elem>b.elem;
    }
};
vector<int> mergeKSortedArrays(vector<vector<int>*> input) {
    priority_queue<int,vector<triplet>,Comp> pq;
    for(int i=0;i<input.size();i++){
        triplet t(input[i]->at(0),i,0);
        pq.push(t);
    }
    vector<int>ans;
    while(!pq.empty()){
        triplet temp = pq.top();
        ans.push_back(temp.elem);
        pq.pop();
        if(temp.ei+1<input[temp.ai]->size()){
            temp.elem = input[temp.ai]->at(temp.ei+1);
            temp.ei += 1;
            pq.push(temp);
        }
    }
    return ans;
}
