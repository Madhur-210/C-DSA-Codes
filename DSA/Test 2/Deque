/**********
 
 Following is the main function we are using internally.
 Refer this for completing the Dequeue class.
 
 
 int main()
 {
 Deque dq(10);
 int choice,input;
 while(true) {
 cin >> choice;
 switch (choice) {
 case 1:
 cin >> input;
 dq.insertfront(input);
 break;
 case 2:
 cin >> input;
 dq.insertrear(input);
 break;
 case 3:
 dq.deletefront();
 break;
 case 4:
 dq.deleterear();
 break;
 case 5:
 cout << dq.getFront() << "\n";
 break;
 case 6:
 cout << dq.getRear() << "\n";
 break;
 default:
 return 0;
 }
 }
 
 return 0;
 }
 
 ************/
//---------My Original Code---------

class Deque {
    // Complete this class
    int size;
    int capacity;
    int *arr;
    int rear;
    int front;
    public:
    Deque(int s=10){
        arr=new int[s];
        capacity=s;
        front=-1;
        rear=-1;
        size=0;
    }
    void insertFront(int element){
        if(size==capacity){
            cout<<-1<<endl;
            return ;
        }
        if(front==-1){
            front=0;
            rear=0;
            arr[front]=element;
            size++;
            return;
        }
        
        if(front==0){
            arr[capacity-1]=element;
            front=capacity-1;
            size++;
            return ;
        }
       
            arr[front-1]=element;
            front--;
            size++;
            return ;
        
           
    }
    void insertRear(int element){
        if(size==capacity){
            cout<<-1<<endl;
            return ;
        }
        if(rear==-1){
            rear=0;
            front=0;
            arr[rear]=element;
            size++;
            return;
        }
        rear=(rear+1)%capacity;
        arr[rear]=element;
        size++;
    }
    void deleteFront(){
        if(size==0){
            cout<<-1<<endl;
            return ;
        }
        if(front==rear){
            front=-1;
            rear=-1;
            size--;
            return ;
        }
        if(front==capacity-1){
            front=0;
            size--;
            return;
        }
        front=(front+1)%capacity;
        size--;
    }
    void deleteRear(){
        if(size==0){
            cout<<-1<<endl;
            return ;
        }
        if(front==rear){
            front=-1;
            rear=-1;
            size--;
            return ;
        }
        if(rear==0){
            rear=capacity-1;
            size--;
            return;
        }
        rear=rear-1;
        size--;
        
    }
    int getFront(){
        if(size==0){
            return -1;
        }
        return arr[front];
    }
    int getRear(){
        if(size==0){
            return -1;
        }
        return arr[rear];
    }
};

// --------- Redundant Code -------------
class Deque {
    // Complete this class
    int size;
    int capacity;
    int *arr;
    int rear;
    int front;
    public:
    Deque(int s=10){
        arr=new int[s];
        capacity=s;
        front=-1;
        rear=-1;
        size=0;
    }
    void insertFront(int element){
        if(size==capacity){
            cout<<-1<<endl;
            return ;
        }
        if(front==-1){
            front=0;
            rear=0;
        }
        else if(front==0){
            front=capacity-1;
        }
        else{
            front--;
        }
        arr[front]=element;
        size++;
    }
       
    void insertRear(int element){
        if(size==capacity){
            cout<<-1<<endl;
            return ;
        }
        if(rear==-1){
            rear=0;
            front=0;            
        }
        else{
            rear=(rear+1)%capacity;
        }
        arr[rear]=element;
        size++;
    }
    void deleteFront(){
        if(size==0){
            cout<<-1<<endl;
            return ;
        }
        if(front==rear){
            front=-1;
            rear=-1;
        }
        else{
            front=(front+1)%capacity;
        }
        size--;
    }
    void deleteRear(){
        if(size==0){
            cout<<-1<<endl;
            return ;
        }
        if(front==rear){
            front=-1;
            rear=-1;
        }
        if(rear==0){
            rear=capacity-1;
        }
        else{
            rear=rear-1;
        }
        size--;
        
    }
    int getFront(){
        if(size==0){
            return -1;
        }
        return arr[front];
    }
    int getRear(){
        if(size==0){
            return -1;
        }
        return arr[rear];
    }
};
