bool isSibling(BinaryTreeNode<int> *root,int p,int q) {
    // Write your code here
    if(root==NULL){
        return false;
    }
    if(root->left!=NULL && root->right!=NULL){
        if(root->right->data==p && root->left->data==q){
            return true;
        }
        else if(root->right->data==q && root->left->data==p){
            return true;
        }
    }
    if(root->right!=NULL){
        return isSibling(root->right,p,q);
    }
    if(root->left!=NULL){
        return isSibling(root->left,p,q);
    }
    return false;
}

int findlevel(BinaryTreeNode<int> *root,int d){
    if(root==NULL){
        return -1;
    }
    if(root->data == d){
        return 0;
    }
    int leftans = findlevel(root->left,d);
    if(leftans!=-1){
        leftans++;
        return leftans;
    }
    int rightans = findlevel(root->right,d);
    if(rightans!=-1){
        rightans++;
        return rightans;
    }
    return -1;
}

bool isCousin(BinaryTreeNode<int> *root, int p, int q) {
    int plevel = findlevel(root,p);
    int qlevel = findlevel(root,q);
    bool cousin = !isSibling(root,p,q);
    return plevel==qlevel && cousin;
}
