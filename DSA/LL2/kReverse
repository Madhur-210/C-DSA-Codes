Node *reverseLinkedListRec(Node *head)
{
    //Write your code here
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node *newhead=reverseLinkedListRec(head->next);
    Node *temp=newhead;
    head->next->next=head;
    head->next=NULL;
    return newhead;
}

Node *kReverse(Node *head, int k)
{
	//Write your code here
    if(head==NULL){
        return head;
    }
    if(k==0){
        return head;
    }
    int count=0;
    Node *temp=head;
    while(temp!=NULL && count<k-1){
        temp=temp->next;
        count++;
    }
    if(temp==NULL && count!=k-1){
        return reverseLinkedListRec(head);
    }
    Node *nexthead=temp->next;
    temp->next=NULL;
    Node *anstail=head;
    Node *anshead=reverseLinkedListRec(head); 
    anstail->next=kReverse(nexthead,k);
    return anshead;
}

/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };
// Pretty Code
*****************************************************************/
Node *kReverse(Node *head , int k)
{
    if(k == 0 || k == 1)
    {
        return head;
    }

    //CODE TO REVERSE A LINKED LIST ITERATIVELY  
    /***************************************/
    Node *current = head;
    Node *forward = NULL;
    Node *previous = NULL;

    int count = 0;

    while(count < k && current != NULL)
    {
        forward = current -> next;
        current -> next = previous;
        previous = current;
        current = forward;
        count++;
    }
    /****************************************/

    if(forward != NULL)
    {
        head -> next = kReverse(forward , k);
    }

    return previous;
}
