/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2)
{
    //Write your code here
    /*if(head1==NULL){
        return head2;
    }
    else if(head2==NULL){
        return head1;
    }
    Node *Anshead=NULL;
    Node *Anstail=NULL;
    
    while(head1!=NULL&&head2!=NULL){
        if((head1->data)<(head2->data)){
            if(Anshead==NULL){
                Anshead=head1;
                Anstail=head1;
            }
            else{
                Anstail->next=head1;
                Anstail=Anstail->next;
            }
            head1=head1->next;
        }
        else{
            if(Anshead==NULL){
                Anshead=head2;
                Anstail=head2;
            }
            else{
                Anstail->next=head2;
                Anstail=Anstail->next;
            }
            head2=head2->next;
        }
    }
    if(head1==NULL){
        Anstail->next=head2;
    }
    else{
        Anstail->next=head1;
    }
    return Anshead;*/
    
    // Recursively 
    if(head1==NULL){
        return head2;
    }
    if(head2==NULL){
        return head1;
    }
    Node* ans = NULL;
    if(head1->data <= head2->data){
        ans = head1;
        ans->next = mergeTwoSortedLinkedLists(head1->next , head2);
    }
    else{
        ans = head2;
        ans->next = mergeTwoSortedLinkedLists(head1 , head2->next);        
    }
    return ans;
}

// Optimised Iterative (Redundant Code)
Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2)
{
    //Write your code here
    if(head1==NULL){
        return head2;
    }
    if(head2==NULL){
        return head1;
    }
    Node *head=NULL;
    Node *tail=NULL;
    if(head1->data<head2->data){
        head=head1;
        tail=head1;
        head1=head1->next;
    }
    else{
        head=head2;
        tail=head2;
        head2=head2->next;
    }
    while(head1!=NULL && head2!=NULL){
        if(head1->data<head2->data){
            tail->next=head1;
            tail=tail->next;
            head1=head1->next;
        }
        else{
            tail->next=head2;
            tail=tail->next;
            head2=head2->next;   
        }
    }
    if(head1!=NULL){
        tail->next=head1;
    }
    if(head2!=NULL){
        tail->next=head2;
    }
    return head;
}
