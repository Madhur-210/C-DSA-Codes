//First Approach
TreeNode<int>* maxSumNode(TreeNode<int>* root) {
    // Write your code here
    //Find Current Node and it's Child's Sum
    TreeNode<int>* ans=root;
    int Sum=root->data;
    for(int i=0;i<root->children.size();i++){
        Sum+=root->children[i]->data;
    }
    //Calling Recursion for getting it's ans
    for(int i=0;i<root->children.size();i++){
        TreeNode<int>* smallans=maxSumNode(root->children[i]);
        //Calculating Rec Ans Node Sum
        int smallansSum=smallans->data;
        for(int i=0;i<smallans->children.size();i++){
            smallansSum+=smallans->children[i]->data;
        }
        //Now checking Rec ans with Current ans
        if(Sum<smallansSum){
            ans=smallans;
        }
    }
    return ans;
}

//Second Approach
template <typename T>
class Pair{
public:
    TreeNode<int>* node;
    int sum;
};
Pair<int> maxSum(TreeNode<int>* root) {
    // Write your code here
    Pair<int> ans;
    ans.node=root;
    ans.sum=root->data;
    //Find Current Node and it's Child's Sum
    for(int i=0;i<root->children.size();i++){
        ans.sum+=root->children[i]->data;
    }
    //Calling Recursion for getting it's ans
    for(int i=0;i<root->children.size();i++){
        Pair<int> smallans=maxSum(root->children[i]);
        
        // Using Pair class this piece of code becomes redundant
        // Calculating Rec Ans Node Sum
        // int smallansSum=smallans->data;
        // for(int i=0;i<smallans->children.size();i++){
        //     smallansSum+=smallans->children[i]->data;
        // }
        
        //Now checking Rec ans with Current ans
        if(ans.sum<smallans.sum){
            ans=smallans;
        }
    }
    return ans;
}
TreeNode<int>* maxSumNode(TreeNode<int>* root) {
    return maxSum(root).node;
}

//More Simpler
class Pair{
    public:
    TreeNode<int>*node;
    int nodeSum;
};

Pair maxSum(TreeNode<int>* root){
    Pair ans;
    ans.node=root;
    ans.nodeSum=root->data;
    for(int i=0;i<root->children.size();i++){
        ans.nodeSum+=root->children[i]->data;
    }
    for(int i=0;i<root->children.size();i++){
        Pair curr=maxSum(root->children[i]);
        if(curr.nodeSum>ans.nodeSum){
            ans=curr;
        }
    }
    return ans;
}
