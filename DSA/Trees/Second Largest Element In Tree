TreeNode < int >* getSecondLargestNode (TreeNode < int >*root){
    queue <TreeNode<int>*> q1;
    TreeNode <int>* max=new TreeNode<int>(INT_MIN);
    TreeNode <int>* sec=new TreeNode<int>(INT_MIN);
    q1.push(root);
    while(!q1.empty()){
        TreeNode <int>* front=q1.front();
        for(int i=0;i<front->children.size();i++){
            q1.push(front->children[i]);            
        }
        if(front->data>max->data){
            sec=max;
            max=front;
        }
        else if(front->data>sec->data && front->data<max->data){
            sec=front;
        }
        q1.pop();
    }
    return sec;    
}

//Second Approach
void getsecond(TreeNode<int>* root,TreeNode<int>* &max,TreeNode<int>* &second_max){
    if(root==NULL){
        return;
    }
    else if(max==NULL){
        max=root;
    }
    else{
        if(root->data>max->data){
            second_max=max;
            max=root;
        }
        else if( second_max!=NULL &&root->data>second_max->data && root->data!=max->data ){
            second_max=root;
        }
        else if( second_max==NULL && root->data!=max->data ){
            second_max=root;
        }
    }
    for(int i=0;i<root->children.size();i++){
        getsecond(root->children[i],max,second_max);
    }
}

TreeNode<int>* getSecondLargestNode(TreeNode<int>* root) {
    TreeNode<int>* second_max=NULL;
    TreeNode<int>* max=NULL;
    getsecond(root,max,second_max);
	return second_max;
}
