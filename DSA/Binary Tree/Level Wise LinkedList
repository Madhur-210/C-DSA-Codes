vector<Node<int>*> constructLinkedListForEachLevel(BinaryTreeNode<int> *root) {
    // Write your code here
    vector<Node<int>*> ans;
    if(root==NULL){
        ans.push_back(NULL);
        return ans;
    }
    Node<int>* head=NULL;
    Node<int>* tail=NULL;    
    queue<BinaryTreeNode<int> *> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        BinaryTreeNode<int> *pending=q.front();
        q.pop();
        if(pending==NULL){
            if(tail!=NULL){
                tail->next==NULL;
            }
            ans.push_back(head);
            if(!q.empty()){
                q.push(NULL);
            }
            head=NULL;
            tail=NULL;
        }
        else{
            Node<int>*newNode=new Node<int>(pending->data);
            if(head==NULL){
                head=newNode;
                tail=newNode;
            }
            else{
                tail->next=newNode;
                tail=tail->next;
            }
            if(pending->left){
                q.push(pending->left);
            }
            if(pending->right){
                q.push(pending->right);
            }
        }
    }
    return ans;
}

//Almost Same But Wants to ADD
vector<Node<int>*> constructLinkedListForEachLevel(BinaryTreeNode<int> *root) {
    // Write your code here
    vector<Node<int>*> ans;
    if(root==NULL){
        ans.push_back(NULL);
        return ans;
    }
    queue<BinaryTreeNode<int> *> pending;
    pending.push(root);
    pending.push(NULL);
    Node<int>*head=NULL;
    Node<int>*tail=NULL;
    while(!pending.empty()){
        BinaryTreeNode<int> * first=pending.front();
        pending.pop();
        if(first==NULL){
            ans.push_back(head);
            head=NULL;
            tail=NULL;
            if(!pending.empty()){
                pending.push(NULL);
            }
        }
        else{
            Node<int>*newNode=new Node<int>(first->data);
            if(head==NULL){
                head=newNode;
                tail=newNode;
            }
            else{
                tail->next=newNode;
                tail=newNode;
            }
            if(first->left){
                pending.push(first->left);
            }
            if(first->right){
                pending.push(first->right);
            }
        }
    }
    return ans;
}
