#include<vector>
class PriorityQueue {
    // Declare the data members here
    vector<int> pq;

   public:
    PriorityQueue() {
        // Implement the constructor here
        
    }

    /**************** Implement all the public functions here ***************/

    void insert(int element) {
        // Implement the insert() function here
        pq.push_back(element);
        int ci=pq.size()-1;
        while(ci>0){
            int pi=(ci-1)/2;
            if(pq[pi]<pq[ci]){
                int swap=pq[pi];
                pq[pi]=pq[ci];
                pq[ci]=swap;
            }
            else{
                break;
            }
            ci=pi;
        }
    }

    int getMax() {
        // Implement the getMax() function here
        if(pq.size()!=0){
            return pq[0];
        }
    }

    int removeMax() {
        // Implement the removeMax() function here
        int max=pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        int pi=0;
        while(pi<pq.size()){
            int ci1=2*pi+1;
            int ci2=2*pi+2;
            int maxI=pi;
            if(ci1<pq.size() && pq[ci1]>pq[pi]){
                maxI=ci1;
            }
            if(ci2<pq.size() && pq[ci2]>pq[maxI]){
                maxI=ci2;
            }
            if(maxI!=pi){
                int swap=pq[maxI];
                pq[maxI]=pq[pi];
                pq[pi]=swap;
            }
            else{
                break;
            }
            pi=maxI;
        }
        return max;
    }

    int getSize() { 
        // Implement the getSize() function here
        return pq.size();
    }

    bool isEmpty() {
        // Implement the isEmpty() function here
        return pq.size()==0;
    }
};
