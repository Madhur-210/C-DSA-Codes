//One Way
// void reverseStack(stack<int> &input, stack<int> &extra) {
//     //Write your code here
//     while(!input.empty()){
//         extra.push(input.top());
//         input.pop();
//     }
//     stack<int> helper;
//     while(!extra.empty()){
//         helper.push(extra.top());
//         extra.pop();
//     }
//     while(!helper.empty()){
//         input.push(helper.top());
//         helper.pop();
//     }
// }
//Second Way
void reverseStack(stack<int> &input, stack<int> &extra) {
    //Write your code here
    if(input.size()==0){
        return ;
    }
    int front=input.top();
    input.pop();
    reverseStack(input,extra);
    while(input.size()!=0){
        extra.push(input.top());
        input.pop();
    }
    input.push(front);
    while(extra.size()!=0){
        input.push(extra.top());
        extra.pop();
    }
}
