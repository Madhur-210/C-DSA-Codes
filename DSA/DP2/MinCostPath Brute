int minCostPath(int **input, int m, int n, int i, int j) {
	// Base case
	if(i == m- 1 && j == n- 1) {
		return input[i][j];
	}
// This is best but I am going with my Logic
	// if(i >= m || j >= n) {
	// 	return INT_MAX;
	// }

	// Recursive calls
    int x=INT_MAX,z=INT_MAX,y=INT_MAX;
    if(j<n-1)
	x = minCostPath(input, m, n, i, j+1);
    if(i<m-1 && j<n-1)
    y = minCostPath(input, m, n, i+1, j+1);
    
    if(i<m-1)
	z = minCostPath(input, m, n, i+1, j);

	// Small Calculation
	int ans = min(x, min(y, z)) + input[i][j];
	return ans;
}

int minCostPath(int **input, int m, int n) {
	return minCostPath(input, m, n, 0, 0);
}
