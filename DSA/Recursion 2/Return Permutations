//First Approach
// int returnPermutations(string input, string output[]){
   	
//     if(input==""){
//         output[0]="";
//         return 1;
//     }
//     int i,j;
//     for(i=0;i<input.size();i++){
//         char first=input[i];
//         string sub=input.substr(0,i)+input.substr(i+1);
//         string temp[10000];
        
//         int ans=returnPermutations(sub,temp);
//         for(j=0;j<ans;j++){
//             output[ans*i+j]=first+temp[j];
//         }
//     }
//     return i*j;
// }

//Second Approach
int returnPermutations(string input, string output[]){
   
    if(input.length()==1){
        output[0]=input;
        return 1;
    }
    string smalloutput[10000];
    int ans=returnPermutations(input.substr(1),smalloutput);
    int i,j;
    for(i=0;i<ans;i++){
        int len=smalloutput[i].size()+1;
        for(j=0;j<len;j++){
            output[(i*len)+j]=smalloutput[i].substr(0,j)+input[0]+smalloutput[i].substr(j);
        }
    }
    return i*j;
}
