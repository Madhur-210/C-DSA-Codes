/***
You need to save all the subsets in the given 2D output array. And return the number of subsets(i.e. number of rows filled in output) from the given function.

In ith row of output array, 1st column contains length of the ith subset. And from 1st column actual subset follows.
For eg. Input : {1, 3, 4, 2} and K = 5, then output array should contain
	{{2, 1, 4},	// Length of this subset is 2
	{2, 3, 2}}	// Length of this subset is 2

Donâ€™t print the subsets, just save them in output.
***/
//REVISION TIME

int subsetSumToK(int input[], int n, int output[][50], int k) {
    // Write your code here
    if(n==0){
        if(k==0){
            output[0][0]=0;
            return 1;
        }
        else{
            return 0;
        }
    }
    int temp2[10000][50];
    int size1=subsetSumToK(input+1,n-1,output,k-input[0]);
    int size2=subsetSumToK(input+1,n-1,temp2,k);
    //Copying array including input
    for(int i=0;i<size1;i++){
        for(int j=output[i][0];j>0;j--){
            output[i][j+1]=output[i][j];
        }
        output[i][0]=output[i][0]+1;
        output[i][1]=input[0];
    }
    //Copying Second array 
    for(int i=0;i<size2;i++){
        output[size1+i][0]=temp2[i][0];
        for(int j=0;j<temp2[i][0];j++){
            output[i+size1][j+1]=temp2[i][j+1];
        }
    }
    
    return size1+size2;
}

// More Cleaner and Shorter Code 
int subsetSumToK(int input[], int n, int output[][50], int k) {
    // Write your code here
    if(n==0){
        if(k==0){
        output[0][0]=0;
        return 1;
        }
        return 0;
    }
    int size1=subsetSumToK(input+1,n-1,output,k);
    int newoutput[10000][50];
    if(k<input[0]){
        return size1;
    }
    int size2=subsetSumToK(input+1,n-1,newoutput,k-input[0]);
    for(int i=0;i<size2;i++){
        output[size1+i][0]=newoutput[i][0]+1;
        output[size1+i][1]=input[0];
        for(int j=1;j<=newoutput[i][0];j++){
            output[size1+i][j+1]=newoutput[i][j];
        }  
    }
    return size1+size2;
}
