#include<iostream>
#include<queue>
#include<vector>
#include<unordered_map>
using namespace std;

vector<int>* getPath(int** edges, int n, bool* visited, int src, int des){
    unordered_map<int,int> mapping;
    if(n==0){
        return NULL;
    }
    queue<int>q;
    q.push(src);
    visited[src]=true;
    bool notdone = true;
    while(!q.empty() && notdone){
        int top = q.front();
        q.pop();
        for(int i=0;i<n;i++){
            if(top==i){
                continue;
            }
            if(edges[top][i]==1){
                if(visited[i])
                    continue;
                q.push(i);
                mapping[i] = top;
                visited[i]=true;
                if(i==des){
                   notdone = 1-notdone;
                   break; 
                }
            }

        }
    }
    if(notdone){
        return NULL;
    }
    else{
        vector<int>* ans = new vector<int>();
        ans->push_back(des);
        while(des!=src){
            des = mapping[des];
            ans->push_back(des);
        }
        return ans;
    }
}

int main(){
    int n;
    int e;
    cin >> n >> e;

    int** edges = new int*[n];
    for(int i=0; i<n; i++){
        edges[i]=new int[n];
        for(int j=0; j<n; j++){
            edges[i][j]=0;
        }
    }

    for(int i=0; i<e; i++){
        int f,s;
        cin >> f >> s;
        edges[f][s]=1;
        edges[s][f]=1;
    }
    int src,des;
    cin>>src>>des;
    bool* visited = new bool[n];

    for(int i=0; i<n; i++){
        visited[i]=false;
    }

    vector<int> * output = getPath(edges, n, visited,src,des);
    if(output!=NULL)
    for(int i=0;i<output->size();i++){
        cout<<output->at(i)<<" ";
    }
    delete output;
    // Delete all the memory
    delete [] visited;
    for(int i=0;i<n;i++){
        delete [] edges[i];
    }
    delete [] edges;
    return 0;
}
